version: '3.8'

services:
  minio:
    image: quay.io/minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data/minio_db:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    restart: always

  bucket_create:
    build:
      context: minio/
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
        mc ls myminio/mlflow 2>/dev/null || mc mb myminio/mlflow
    depends_on:
      - minio

  postgres_mlflow:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER_MLFLOW}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_MLFLOW}
      POSTGRES_DB: ${POSTGRES_DB_MLFLOW}
    volumes:
      - ./data/postgres_db_mlflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "mlflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    ports:
      - "5432:5432" 
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    ports:
      - 15432:80
    volumes:
      - ./data/pgadmin_db:/var/lib/pgadmin
    user: '$UID:$GID'
    depends_on:
      - postgres_mlflow
    
  mlflow:
    build:
      context: ./mlflow
    restart: always
    ports:
      - "5000:5000"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    depends_on:
      - postgres_mlflow
    command:
      mlflow server --backend-store-uri postgresql://${POSTGRES_USER_MLFLOW}:${POSTGRES_PASSWORD_MLFLOW}@postgres_mlflow/${POSTGRES_DB_MLFLOW} --default-artifact-root s3://${AWS_S3_BUCKET}/ --host 0.0.0.0
